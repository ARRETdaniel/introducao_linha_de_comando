#+title: Comandos Shell ou: “Como se perder no terminal?”
#+author: Matheus de Souza Pessanha
#+email: 00119110328@pq.uenf.br

* Onde eu consigo uma ajuda?
Todos os comandos (nativos ou não) possuem uma "man page", ou "página de manual", onde fica toda a documentção do comando.

Para abrir o manual de algum comando, apenas digite no terminal:

#+begin_src bash

$ man <comando>

#+end_src

Exemplos:
~man man~ -> abre o manual do comando ~man~!

Dicas:
- Caso o manual ultrapasse o tamanho do terminal, é possível navegar sobre ele com as setas de direção ou com ~h/j/k/l~
- Para sair da documentação, apenas tecle ~q~
* Como me movimento?
Existem diversas maneiras de se movimentar pelo terminal e isso também depende de qual emulador de terminal você está usando!

Porém, existe alguns atalhos do teclado que de certa forma são universais! Iremos ver cada um deles:

** Movimentação básica
[[../assets/basic_moves.gif]]

Vamos tentar algumas movimentações básicas:

- Podemos avançar um caractere com =Ctrl-f= ou =Seta pra direita=
- Podemos voltar um caractere com =Ctrl-b= ou =Seta pra esquerda=
- =Alt-f= ou =Ctrl-SetaDireita= para avançar por palavras
- =Alt-b= ou =Ctrl-SetaEsquerda= para voltar por palavras
- =Ctrl-a= ou =Home= para ir para o início da linha
- =Ctrl-e= ou =End= para ir pro final da linha

** Manipulando linhas e caracteres
Escrevam algumas frases no terminal!

Para apagar a partir do cursor até o final da linha, usamos o =Ctrl-k=

Já para apagar do cursor até o começo da linha, usamos o =Ctrl-u=

Agora você pode colocar o que você acabou de cortar com o =Ctrl-y=

Ok, mas se eu quiser copiar/colar a partir da área de transferência?
Simples: geralmente o copiar está mapeado para =Ctril+Shift+c= e o colar para =Ctrl+Shift+v=

E se eu quiser apagar uma palavra inteira? =Alt+f= faz isso, porém, com uma ressalva:
- Ele vai apagar a partir da posição do seu cursor até o final da palavra!
- Para apgar uma palavra inteira, possicione o cursor na primeira letra e então execute o comando

*** Nossa, minha tela está cheia, o que faço?
Fácil! Você pode usar =Ctrl+l= ou o executar o comando ~clear~

* Comandos Básicos
A seguir veremos alguns comandos essenciais para o dia a dia!

Avisos:
- A tecla =RET= significa "Return", que é o "Enter"
- Todos os comandos são executados da seguinte maneira: =<comando> <flags> <entradas> + RET=
- O shell padrão - ~sh~ - é bem simples e limitado; vários atalhosd de movimentação não serão reconhecidos

Bem, o docker que iremos utilizar vem instalado com quatro shells diferentes:
1. sh (padrão)
2. bash
3. zsh
4. fish

Para iniciar um shell, apenas digite o nome do shell desejado e tecle =RET=.

Infelizmente, todas as vezes que vocês iniciarem o contêiner, os dados/programas modificados
serão excluídos... Sim, existe algumas formas de persistir esses dados, porém, esses métodos
envolvem um conhecimento mais aprofundado em docker e Linux, enão preferi evitar eles.

Por isso, existem duas opções para modificvar o shell padrão:
1. Executar o shell desejado toda vez que inciar um contêiner
2. Ir no arquivo ~Dockerfile~ e mudar:
#+begin_src dockerfile
# mudar disso:
CMD /bin/sh

# para:
CMD /bin/bash
# OU
CMD /bin/zsh
# OU
CMD /bin/fish
#+end_src

Obviamente, será necessário montar a imagem docker novamente, com: =docker build -t <nome> .=!

** Parâmetros de opções
Diversos comandos possuem algumas opções extras que podem ser acionadas com esses parâmetros!
Os nomes originais são "flags", ou "bandeiras".

Eles funcionam da seguinte maneira:
=<comando> -<opção> --<opção>-<longa>=

Exemplos:
Além do comando =man=, também podemos conseguir ajuda para um comando acionando a flag =--help= ou =-h=
=<comando> --help=

** exit
Como sair do shell ou interromper o contêiner?

Apenas execute o comando =exit= seguido de um =RET=
Uma alternativa é o atalho =Ctrl-d=

Caso você só tenha um shell rodando, o contêiner atual será desligado.
** whoami
Bem, traduzindo de forma direta ~whoami~ significa "quem sou eu?".
Esse comando serve para imprimir na tela qual o usuário que está logado

[[../assets/whoami.png]]
** pwd
"print working directory", ou "imprima o diretório de trabalho (atual)"

Como o próprio nome diz: mostra em qual diretório você está atualmente!
** ls
Pode ser lembrado como "list"

- Lista todos os arquivos presentes no atual diretório
- Pode receber um outro diretório como entrada

Possuem alguns parâmetros de opções:
Exemplos:
- =ls -l= -> lista todos os arquivos/diretórios, mostrando também suas permissões
- =ls -a= -> lista todos os arquivos/diretórios, inclusive os arquivos ocultos
** cd
Pode ser entendido como "change directory"

- Método padrão de navegar entre diretórios
- Recebe uma entrada: o diretório para o qual voc quer ir
- Aceita tanto caminhos absolutos ou caminhos relativos
- Nos shells ~zsh~ e ~fish~, não há necessidade de ser executado
** mkdir
Traduzindo: "criando um diretório"

Uso:
- =mkdir pasta= -> cria um diretório com o nome "pasta"
- =mkdir 'pasta de exemplo'= -> cria um diretório com o nome "pasta de exemplo"
- =mkdir pasta\ de\ exemplo= -> tem o mesmo efeito que o comando acima
- =mkdir pasta1 pasta2= -> cria duas pastas
- =mkdir -p ./pasta1/pasta2= -> cria a "pasta2" dentro da "pasta1"
** rmdir
"remove diretório"

- Apenas funciona para diretórios vazios!

Uso:
- =rmdir pasta= -> remove o diretório chamado "pasta"
- =rmdir pasta1 pasta2= -> remove os dois diretórios
- =rmdir -p ./pasta1/pasta2= -> remove todas as pastas e seus "parentes"
- =rmdir *= -> remove todos os diretório do caminho atual
** rm
"remove" ou "remover", comando para exlucir qualquer coisa

Uso:
- =rm <arquivos>= -> remove todos os arquivos listados, caso seja um diretório, dará erro
- =rm -f= -> força a exclusão do arquivo
- =rm -r= -> remove recursivamente tudo o que existir dentro de um diretório e o próprio junto.
** touch
Cria um arquivo vazio

Uso:
- =touch <nome>.<extensão>= -> cria um arquivo vazio com o nome e extensão específicados
** echo
"ecoar"

Geralmente usamos ele para imprimir algum texto na tela ou redirecionar para um arquivo

Usos:
- =echo <entrad>= -> imprime na tela as entradas
- =echo <entrada> > <arquivo>= -> redireciona a STDOUT do ~echo~ para um arquivo
- =echo <entrada> >> <arquivo>= -> redireciona a STDOUT ~echo~ e adiona o conteúdo no final do arquivo
** cat
"concatenate" ou "concatenção".

Pode ser usado para mostrar o conteúdo de um ou vários arquivos!

Uso:
- =cat <arquivos>=
- =cat -n <arquivos>= -> mostra o número de cada linha do arquivo
- =cat -e <arquivos>= -> mostra um ~$~ em todo final de linha
** mv
"move" ou "mover"

Usado para mover arquivos ou diretórios de um caminho para o outro e também para renomear um arquivo/diretório

Usos:
- =mv <caminho-inicial> <caminho-destino>= -> move algo do "caminh-inicial" para o "caminho-destino"
- =mv pasta1 pasta2= -> renomeia "pasta1" para "pasta2"
** cp
"copy" ou "copiar"

Copia arquivos ou diretórios

Uso:
- =cp arquivo1 arquivo2 /home= -> copia os arquivos para a pasta ~/home~
- =cp -r . ..= -> copia o diretório atual, recursivamente para o diretório ~home~
** head
"cabeça"

Imprime na tela as primeiras partes de um arquivo!

Usos:
- =head <arquivo1> <arquivo2>= -> imprime as dez primerias linhas do "arquivo1" e "arquivo2" para a STDOUT
- =head -n 15 <arquivo>= -> imprime as quinze primeiras linhas de um arquivo
** tail
"cauda"

Imprime as últimas partes de um arquivo

Usos:
- =tail <arquivo1>= -> imprime as últimas dez linhas do "arquivo1"
- =tail -n 15 <arquivo1>= -> imprime as últimas quinze linhas do "arquivo1"
** top
Veja quais processos estão sendo executados no sistema operacional

Uso: =top=
** ps
Imprime na tela um resumo dos processos rodando

Uso: =ps=
** kill
"mate"

Para um processo dado um ~PID~

Usos:
- =kill 1343= -> para ou "mata" o processo com número "1343"
** killall
"mate todos"

Dado um programa, o sistema operacional irá parar todos os processos relacionados com esse programa

Usos:
- =killall picom= -> para todos os processos, ou "mata" o programa "picom"
